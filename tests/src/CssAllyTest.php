<?php
/**
 * CssAlly
 * 
 * Copyright (C) 2011 Bill Parrott
 * 
 * LICENSE
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * PHP Version 5
 * 
 * @category   CssAlly
 * @package    CssAlly_Tests
 * @author     Bill Parrott <bill@cssally.com>
 * @copyright  2011 Bill Parrott
 * @license    GNU GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 * @link       http://cssally.com/
 */

/**
 * @see BaseTest 
 */
require_once dirname(__FILE__) . '/BaseTest.php';

/**
 * @see CssAlly
 */
require_once dirname(__FILE__) . '/../../src/CssAlly.php';

/**
 * Test class for CssAlly.
 * Generated by PHPUnit on 2011-09-03 at 00:15:08.
 */
class CssAllyTest extends BaseTest {

    /**
     * @var CssAlly
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CssAlly(array(), array('cssDir' => 'path'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers CssAlly::__construct
     * @dataProvider constructorSetsBrowsersProvider
     */
    public function testConstructorSetsDefaultBrowsers(array $browsers)
    {
        $browserList = $this->object->getBrowsers();
        $this->assertInstanceOf('Browser_Explorer', $browserList['explorer']);
        $this->assertNull($browserList['konqueror']);
        $this->assertInstanceOf('Browser_Mozilla', $browserList['mozilla']);
        $this->assertInstanceOf('Browser_Opera', $browserList['opera']);
        $this->assertInstanceOf('Browser_Webkit', $browserList['webkit']);
    }

    /**
     * @covers CssAlly::__construct
     * @covers CssAlly::setBrowsers
     * @dataProvider constructorSetsBrowsersProvider
     */
    public function testConstructorSetsBrowsers(array $browsers)
    {
        $this->object = new CssAlly($browsers, array('cssDir' => 'path'));
        $browserList = $this->object->getBrowsers();
        foreach ($browsers as $name => $value) {
            if ($value) {
                $className = 'Browser_' . ucfirst($name);
                $this->assertInstanceOf($className, $browserList[$name]);
            } else {
                $this->assertNull($browserList[$name]);
            }
        }
    }

    public function constructorSetsBrowsersProvider()
    {
        return array(
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => false,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => false,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => false,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => false,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => false,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
            array(
                array(
                    'explorer'  => true,
                    'konqueror' => true,
                    'mozilla'   => true,
                    'opera'     => true,
                    'webkit'    => true,
                ),
            ),
        );
    }

    /**
     * @covers CssAlly::__construct
     * @dataProvider constructorWithNonDefaultOptionsProvider
     * @param array $options
     */
    public function testConstructorWithNonDefaultOptions(array $options)
    {
        $this->object = new CssAlly(array(), $options);
        foreach ($options as $option => $value) {
            $this->assertEquals($value, $this->object->getOption($option));
        }
    }

    public function constructorWithNonDefaultOptionsProvider()
    {
        return array(
            array(
                array(
                    'compress' => true,
                    'minify'   => true,
                    'gzip'     => true,
                    'cssDir'   => 'path',
                ),
                array(
                    'compress' => false,
                    'minify'   => false,
                    'gzip'     => true,
                    'cssDir'   => 'apath',
                ),
                array(
                    'compress' => true,
                    'minify'   => false,
                    'gzip'     => true,
                    'cssDir'   => 'thispath',
                ),
                array(
                    'compress' => true,
                    'minify'   => true,
                    'gzip'     => false,
                    'cssDir'   => 'thatpath',
                ),
                array(
                    'compress' => false,
                    'minify'   => true,
                    'gzip'     => false,
                    'cssDir'   => 'somepath',
                ),
            ),
        );
    }

    /**
     * @covers CssAlly::__construct
     */
    public function testConstructorThrowsExceptionWithoutCssDir()
    {
        $this->setExpectedException('InvalidArgumentException');
        $this->object = new CssAlly();
        $this->assertEquals(true, true);
    }

    /**
     * @depends testConstructorSetsBrowsers
     * @covers CssAlly::getBrowser
     * @dataProvider constructorSetsBrowsersProvider
     * @param type $browser
     */
    public function testGetBrowser(array $browsers)
    {
        $this->object = new CssAlly($browsers, array('cssDir' => 'path'));
        foreach ($browsers as $name => $value) {
            if ($value) {
                $className = 'Browser_' . ucfirst($name);
                $this->assertInstanceOf($className, $this->object->getBrowser($name));
            } else {
                $this->assertNull($this->object->getBrowser($name));
            }
        }
    }

    /**
     * @covers CssAlly::setBrowser
     * @depends testGetBrowser
     * @dataProvider setBrowserProvider
     * @param type $browser
     * @param type $generate
     */
    public function testSetBrowser($browser, $useBrowserRules)
    {
        $this->object->setBrowser($browser, $useBrowserRules);
        if ($useBrowserRules) {
            $className = 'Browser_' . ucfirst($browser);
            $this->assertInstanceOf($className, $this->object->getBrowser($browser));
        } else {
            $this->assertNull($this->object->getBrowser($browser));
        }
    }

    public function setBrowserProvider()
    {
        return array(
            array('explorer', true),
            array('konqueror', true),
            array('mozilla', true),
            array('opera', true),
            array('webkit', true),
            array('explorer', false),
            array('konqueror', false),
            array('mozilla', false),
            array('opera', false),
            array('webkit', false),
        );
    }

    /**
     * @covers CssAlly::setBrowsers
     * @depends testSetBrowser
     * @dataProvider constructorSetsBrowsersProvider
     * @param array $browsers
     */
    public function testSetMultipleBrowsers(array $browsers)
    {
        $this->object->setBrowsers($browsers);
        foreach ($browsers as $name => $value) {
            if ($value) {
                $className = 'Browser_' . ucfirst($name);
                $this->assertInstanceOf($className, $this->object->getBrowser($name));
            } else {
                $this->assertNull($this->object->getBrowser($name));
            }
        }
    }

    /**
     * @covers CssAlly::setBuiltCss
     * @covers CssAlly::getBuiltCss
     * @dataProvider compressProvider
     * @param type $cssString
     */
    public function testSetBuiltCss($cssString)
    {
        $this->object->setBuiltCss($cssString);
        $this->assertEquals($cssString, $this->object->getBuiltCss());
    }

    /**
     * @covers CssAlly::compress
     * @depends testSetBuiltCss
     * @dataProvider compressProvider
     * @param type $cssString
     * @param type $expectedCompressedString
     */
    public function testCompress($cssString, $expectedCompressedString)
    {
        $this->object->setBuiltCss($cssString);
        $this->object->compress();

        $this->assertEquals($expectedCompressedString, $this->object->getBuiltCss());
    }

    public function compressProvider()
    {
        $path = dirname(__FILE__) . '/../css';
        $dh = opendir($path);

        $testCssStrings = array();
        while (false !== ($file = readdir($dh))) {
            if (!is_dir("{$path}/{$file}")) {
                $css              = file_get_contents("{$path}/{$file}");
                $compressed       = file_get_contents("{$path}/compressed/{$file}");
                $testCssStrings[] = array($css, $compressed);
            }
        }
        closedir($dh);

        return $testCssStrings;
    }

    /**
     * @covers CssAlly::addCssFile
     * @dataProvider addCssFileProvider
     * @param type $filePath
     */
    public function testAddCssFile($filePath)
    {
        $this->object = new CssAlly(array(), array('cssDir' => 'path'));
        $this->object->addCssFile($filePath);
        $this->assertContains('path/' . $filePath, $this->object->getFileList());
    }

    public function addCssFileProvider()
    {
        $path = dirname(__FILE__) . '/../css';
        $dh   = opendir($path);

        $fileList = array();
        while (false !== ($file = readdir($dh))) {
            if (!is_dir("{$path}/{$file}")) {
                $fileList[] = array("{$file}");
            }
        }
        closedir($dh);

        return $fileList;
   }

   /**
    * @covers CssAlly::addCssFiles
    * @dataProvider addCssFilesProvider
    * @param array $files
    */
   public function testAddCssFiles(array $files)
   {
        $this->object = new CssAlly(array(), array('cssDir' => 'path'));
        $this->object->addCssFiles($files);
        foreach ($files as $file) {
            $this->assertContains('path/' . $file, $this->object->getFileList());
        }
   }

   public function addCssFilesProvider()
   {
        $path = dirname(__FILE__) . '/../css';
        $dh   = opendir($path);

        $fileList = array();
        while (false !== ($file = readdir($dh))) {
            if (!is_dir("{$path}/{$file}")) {
                $fileList[] = array("{$file}");
            }
        }
        closedir($dh);

        return array($fileList);
   }
}